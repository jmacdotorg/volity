#!/usr/bin/perl 

eval 'exec /usr/bin/perl  -S $0 ${1+"$@"}'
    if 0; # not running under some shell

use warnings;
use strict;

use Volity::Server;
use Getopt::Long;
use Volity::GameRecord;

use YAML;

Getopt::Long::Configure(qw(no_ignore_case no_auto_abbrev));

my %valid_options = (
		    host=>"h",
		    username=>"u",
		    password=>"p",
		    game=>"g",
		    jabber_id=>"J",
		    admins=>"a",
		    bookkeeper=>"b",
		    contact_email=>"c",
		    pidfile=>"f",
		    contact_jabber_id=>"j",
		    log_config=>"l",
		    muc_server=>"m",
		    port=>"o",
		    resource=>"r",
		    volity_version=>"v",
		    bots=>"B",
		    config=>"C",
		    visibility=>"V",
		    );
my @getopt_options = map("$_|$valid_options{$_}=s", keys(%valid_options));

my %opts;
# getopts('a:u:p:h:r:J:g:o:b:l:m:B:f:c:v:j:V:C:', \%opts);
GetOptions(\%opts,
	   @getopt_options,
	   );

# Take care of possible config-file loading.
if ($opts{config}) {
    my $from_config;
    eval {
	$from_config = YAML::LoadFile($opts{config});
    };
    if ($@) {
	die "No data loaded from the config file path '$opts{config}.'\nYAML error:\n$@\n";
    }
    if (ref($from_config) eq "HASH") {
	for my $option_from_config (keys(%$from_config)) {
	    if ($valid_options{$option_from_config}) {
		$opts{$option_from_config} = $$from_config{$option_from_config};
	    }
	    else {
		die "Unrecognized option '$option_from_config' in config file $opts{config}.\n";
	    }
	}
    }
    else {
	die "The config file must be a YAML file representation of a simple hash. Please see the volityd manpage for more information.\n";
    }

}
	   
# Check to see if there's a J option, with a full login JID. If so,
# break it up and stuff the parts into other opts. Collisions are bad,
# though.

if ($opts{jabber_id}) {
    if ($opts{username} || $opts{host} || $opts{resource}) {
	die "If you provide a full login JID with the J flag, then you can't use the u, h, or r flags. Make up your mind and use one style or the other!\n";
    }
    ($opts{username}, $opts{host}, $opts{resource}) = $opts{jabber_id} =~ m|^(.*?)@(.*?)(?:/(.*?))?$|;
    unless ($opts{username}) {
	die "I couldn't parse '$opts{jabber_id}' as a valid JID. Sorry!\n";
    }
}

foreach (qw(username host password)) {
    unless ($opts{$_}) {
	die "You must define a $_, either on the command line or in a config file.\n";
  }
}

if (defined($opts{game})) {
    eval qq|require $opts{game}|;
    if ($@) {
	die "Couldn't load the game module $opts{game}: $@\n";
    } 
    unless ($opts{game}->isa("Volity::Game")) {
	die "The class you define as your game module must be a subclass of Volity::Game.\n";
    }
} else {
  die "You must define a game class, either on the command line or in a config file.\n";
}

if (defined($opts{pidfile})) {
  open (PID, ">$opts{pidfile}") or die "Can't write a PIDfile to $opts{pidfile}: $!";
  print PID $$;
  close PID or die "Can't close PIDfile $opts{pidfile}: $!";
}

# Parse the bot list, if present...
my @bot_classes;
if (defined($opts{bots})) {
    @bot_classes = split(/\s*,\s*/, $opts{bots});
    foreach (@bot_classes) {
	eval"(require $_);";
	if ($@) {
	    die "Can't use bot class $_: $@\n";
	}
    }
} else {
    @bot_classes = ();
}

# Hardcoded default bookkeeper JID.
my $default_bkp = 'bookkeeper@volity.com';

# Hardcoded alias.
my $alias = 'volity';

my @admin_jids;
if ($opts{admins}) {
    for my $jid (split(/\*s,\s*/, $opts{admins})) {
	# Sanity-check the JIDs, and strip resource strings.
	if (my ($stripped_jid) = $jid =~ /^(.+?\@.+?)(\/.+$)?$/) {
	    push (@admin_jids, $stripped_jid);
	    if ($2) {
		warn "Stripping resource string from admin JID $jid.\n";
	    }
	} else {
	    die "Bad admin JID: $jid\n";
	}
    }
} else {
    @admin_jids = ();
}

my $server = Volity::Server->new(
				 {
				  user=>$opts{username},
				  password=>$opts{password},
				  port=>$opts{port} || 5222,
				  host=>$opts{host},
				  resource=>$opts{resource} || 'volity',
				  alias=>$alias,
				  game_class=>$opts{game},
				  bookkeeper_jid=>$opts{bookkeeper} || $default_bkp,
				  muc_host=>$opts{muc_server} || 'conference.volity.net',
				  volity_version=>$opts{volity_version} || '1.0',
				  contact_email=>$opts{contact_email},
				  contact_jid=>$opts{contact_jabber_id},
				  visible=>defined($opts{visibility})? $opts{visibility} : 1,
				  admins=>\@admin_jids,
				}
				);

if (defined($opts{log_config})) {
    my $logger_config_filename = $opts{log_config};
    Log::Log4perl::init_and_watch($logger_config_filename, 5);
    my $logger = Log::Log4perl->get_logger("Volity");
}

$server->bot_classes(@bot_classes);

$server->start;

=head1 NAME

volityd -- A simple Volity game server

=head1 SYNOPSIS

# Running a Rock, Paper, Scissors game, defined in the
# Volity::Game::RPS module, with a bot class defined
# in the Volity::Bot::RPS module.

volityd -u mygame -p bigsecret -h volity.net -r testing \
        -b bookkeeper@volity.net/volity 
        -g Volity::Game::RPS -B Volity::Bot::RPS \
        -l /home/jmac/volity/volity_logger.conf

=head1 DESCRIPTION

This is a simple Volity game server. It uses the Volity hierarchy of
Perl modules to run a game module specified at runtime. 

At this time, the only way to configure this program is through
command-line switches. Yes, this is rather unfortunate. We'll support
a file-based configuration system, in time.

=head1 CONFIGURATION

You can run volityd with a configuration file, or by supplying a list
of command-line options at runtime. You can also mix the two methods,
in which case options you specify on the command line will override
any of their counterparts in the config file. See L<"Config file
format"> for more about the config file.

In the following documentation, each option has two names listed: its
one-letter abbreviation followed by its long name. Either is usable on
the command line, and So, for example, to set the Jabber ID that your
parlor should use as C<foo@bar.com>, you can either supply B<-J
foo@bar.com> or B<--jabber_id=foo@bar.com> on the command line, or the
line C<jabber_id: foo@bar.com> in the config file.

=head2 Required parameters

The program will immediately die (with a specific complaint) if you
don't specify enough information on the command line to allow the
parlor to authenticate with the Jabber server, or run a game
module. Use an appropriate combination of the following flags to
achieve this.

=over

=item h host

The hostname of the Jabber server that the game server will use.

=item u username

The Jabber username that the game server will use when connecting.

=item p password

The password that the game server will use when authenticating with
the Jabber server.

If you supply this on the command line, volityd will automatically
modify C<$0> so that it won't be exposed to process-listing commands
like B<ps>.

=item g game

The full Perl package name of the game module that the game server
will run. It must be visible to @INC.

=item J jabber_id

The parlor's full Jabber ID. You can use this flag instead of using
the C<u>, C<h> and C<r> flags. (But you can't use both this I<and>
them.)

=back

=head2 Optional parameters

Each of the following are optional. Not defining them at runtime will
result in default behavior as described.

=over

=item a admins

A comma-separated list of JabberIDs that are allowed to send admin.*
RPCs to this parlor.

B<Default>: None. All admin.* calls result in faults sent back to the caller.

=item b bookkeeper

The JabberID of the Volity network's bookkeeper.

B<Default>: bookkeeper@volity.org

=item c contact_email

The contact email address of the person responsible for this server
(you, probably).

Polite servers set either this or the C<j> switch (or both).

B<Default>: None.

=item f pidfile

The filesystem pathname of the pidfile to be created when the server
starts.

B<Default>: None, and no pidfile is used.

=item j contact_jabber_id

The contact Jabber ID of the person responsible for this server (you, probably).

Polite servers set either this or the C<c> switch (or both).

B<Default>: None.

=item l log_config

The filesystem pathname of a L<Log::Log4perl> configuration file,
which defines the behavior of the volityd logger. The logger works
through various Log4perl invocations already spread throughout the
Volity modules, set at appropriate priority levels, ranging from
'DEBUG' to 'INFO' to 'FATAL'.

B<Default>: None, and no logging occurs. Show stopping events will
still trigger descriptive output to STDERR.

=item m muc_server

The hostname of the Jabber MUC server to use when creating new game tables.

B<Default>: conference.volity.net

=item o port

The Jabber server's TCP port.

B<Default>: 5222 (the standard Jabber connection port)

=item r resource

The Jabber resource string that the game server will use after
authenticating. The string 'volity' (the default string) is a good
choice for 'live' game servers; use something like 'testing'
otherwise.

B<Default>: 'volity'

=item v volity_version

The version number of the Volity platform protocol that this server supports.

Unless you're doing something highly unusual with the Volity Perl
libraries, you're probably best sticking with the default value on
this one.

B<Default>: 1.0

=item B bots

A comma-separated list of the full Perl package names of all the Bot
modules available to the server. They will be invoked through Perl's
C<require()> function, so they must each be visible to @INC.

B<Default>: None, and no bots will be available to the server.

=item C config

The path to a volityd config file. See L<"Config file format">.

If you specify any command-line options beyond this one, they will
override any config options specified in the file.

B<Default>: None, and volityd will look for all options to come from
the command line.

=item V visibility

Whether or not this parlor is visble to Volity's game finder. Set to 1
if it is, or 0 if it should go unlisted.

B<Default>: 1

=back

=head2 Config file format

If you specify a config file via the B<-C> or B<--config> command-line
options, then you must prepare a YAML file at that location. Its
contents are simply a list of the options you want to set, with one
option per line. Each option is keyed by its long name. Here's a
possible snippet:

  username: foo
  host: volity.net
  password: secretpassword42
  game: Volity::Game::MyFunGame

That C<key: value> notation's pretty much the only part of YAML you'll
need to use here, but if you'd like more information about this markup
format, see L<YAML> or http://yaml.org .

=head1 SEE ALSO

The Volity developers site: http://volity.org

For information on creating Volity modules in Perl (which you can then
make into live Volity game servers through this very program), see the
Volity Developer's Guide: http://www.volity.org/docs/devguide_perl

=head1 BUGS

=over

=item *

The server should be launchable with a pointer to a configuration file, as opposed to a giant list of command-line configuration switches.

=back

=head1 AUTHOR

Jason McIntosh <jmac@jmac.org>

=cut
