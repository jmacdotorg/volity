#!/usr/bin/perl 

eval 'exec /usr/bin/perl  -S $0 ${1+"$@"}'
    if 0; # not running under some shell

use warnings;
use strict;

use Volity::Server;
use Getopt::Std;
use Volity::GameRecord;

my %opts;
getopts('u:p:h:r:g:o:b:l:m:B:f:c:v:j:V:', \%opts);

foreach ('user', 'host', 'password',) {
  unless (defined($opts{substr($_, 0, 1)})) {
    die "You must define a $_, with the " . substr($_, 0, 1) . " switch.\n";
  }
}

if (defined($opts{g})) {
    eval qq|require $opts{g}|;
    if ($@) {
	die "Couldn't load the game module $opts{g}: $@\n";
    } 
    unless ($opts{g}->isa("Volity::Game")) {
	die "The class you define with -g must be a subclass of Volity::Game.\n";
    }
} else {
  die "You must define a game class with -g.\n";
}

if (defined($opts{f})) {
  open (PID, ">$opts{f}") or die "Can't write a PIDfile to $opts{f}: $!";
  print PID $$;
  close PID or die "Can't close PIDfile $opts{f}: $!";
}

# Parse the bot list, if present...
my @bot_classes;
if (defined($opts{B})) {
    @bot_classes = split(/\s*,\s*/, $opts{B});
    foreach (@bot_classes) {
	eval"(require $_);";
	if ($@) {
	    die "Can't use bot class $_: $@\n";
	}
    }
} else {
    @bot_classes = ();
}

# Hardcoded default bookkeeper JID.
my $default_bkp = 'bookkeeper@volity.com';

# Hardcoded alias.
my $alias = 'volity';

my $server = Volity::Server->new(
				 {
				  user=>$opts{u},
				  password=>$opts{p},
				  port=>$opts{o} || 5222,
				  host=>$opts{h},
				  resource=>$opts{r} || 'volity',
				  alias=>$alias,
				  game_class=>$opts{g},
				  referee_class=>$opts{R},
				  bookkeeper_jid=>$opts{b} || $default_bkp,
				  muc_host=>$opts{m} || 'conference.volity.net',
				  volity_version=>$opts{v} || '1.0',
				  contact_email=>$opts{c},
				  contact_jid=>$opts{j},
				  visible=>defined($opts{V})? $opts{V} : 1,
				}
				);

if (defined($opts{l})) {
    my $logger_config_filename = $opts{l};
    Log::Log4perl::init_and_watch($logger_config_filename, 5);
    my $logger = Log::Log4perl->get_logger("Volity");
}

$server->bot_classes(@bot_classes);

# $Volity::GameRecord::gpg_bin = $opts{G};
# $Volity::GameRecord::gpg_secretkey = $opts{K};
# $Volity::GameRecord::gpg_passphrase = $opts{P};
$server->start;

=head1 NAME

volityd -- A simple Volity game server

=head1 SYNOPSIS

# Running a Rock, Paper, Scissors game, defined in the
# Volity::Game::RPS module, with a bot class defined
# in the Volity::Bot::RPS module.

volityd -u mygame -p bigsecret -h volity.net -r testing \
        -b bookkeeper@volity.net/volity 
        -g Volity::Game::RPS -B Volity::Bot::RPS \
        -l /home/jmac/volity/volity_logger.conf

=head1 DESCRIPTION

This is a simple Volity game server. It uses the Volity hierarchy of
Perl modules to run a game module specified at runtime. 

At this time, the only way to configure this program is through
command-line switches. Yes, this is rather unfortunate. We'll support
a file-based configuration system, in time.

=head1 CONFIGURATION

=head2 Required parameters

The program will immediately die (with a specific complaint) if any of
the following parameters are not defined at runtime.

=over

=item h

The hostname of the Jabber server that the game server will use.

=item u

The Jabber username that the game server will use when connecting.

=item p

The password that the game server will use when authenticating with
the Jabber server.

=item g

The full Perl package name of the game module that the game server
will run. It must be visible to @INC.

=back

=head2 Optional parameters

Each of the following are optional. Not defining them at runtime will
result in default behavior as described.

=over

=item b

The JabberID of the Volity network's bookkeeper.

B<Default>: bookkeeper@volity.org

=item c

The contact email address of the person responsible for this server
(you, probably).

Polite servers set either this or the C<j> switch (or both).

B<Default>: None.

=item f

The filesystem pathname of the pidfile to be created when the server
starts.

B<Default>: None, and no pidfile is used.

=item j

The contact Jabber ID of the person responsible for this server (you, probably).

Polite servers set either this or the C<c> switch (or both).

B<Default>: None.

=item l

The filesystem pathname of a L<Log::Log4perl> configuration file,
which defines the behavior of the volityd logger. The logger works
through various Log4perl invocations already spread throughout the
Volity modules, set at appropriate priority levels, ranging from
'DEBUG' to 'INFO' to 'FATAL'.

B<Default>: None, and no logging occurs. Show stopping events will
still trigger descriptive output to STDERR.

=item m

The hostname of the Jabber MUC server to use when creating new game tables.

B<Default>: conference.volity.net

=item o

The Jabber server's TCP port.

B<Default>: 5222 (the standard Jabber connection port)

=item r

The Jabber resource string that the game server will use after
authenticating. The string 'volity' (the default string) is a good
choice for 'live' game servers; use something like 'testing'
otherwise.

B<Default>: 'volity'

=item v

The version number of the Volity platform protocol that this server supports.

Unless you're doing something highly unusual with the Volity Perl
libraries, you're probably best sticking with the default value on
this one.

B<Default>: 1.0

=item B

A comma-separated list of the full Perl package names of all the Bot
modules available to the server. They will be invoked through Perl's
C<require()> function, so they must each be visible to @INC.

B<Default>: None, and no bots will be available to the server.

=item V

Whether or not this parlor is visble to Volity's game finder. Set to 1
if it is, or 0 if it should go unlisted.

B<Default>: 1

=back

=head1 SEE ALSO

The Volity developers site: http://volity.org

For information on creating Volity modules in Perl (which you can then
make into live Volity game servers through this very program), see the
Volity Developer's Guide: http://www.volity.org/docs/devguide_perl

=head1 BUGS

=over

=item *

The server should be launchable with a pointer to a configuration file, as opposed to a giant list of command-line configuration switches.

=back

=head1 AUTHOR

Jason McIntosh <jmac@jmac.org>

=cut
