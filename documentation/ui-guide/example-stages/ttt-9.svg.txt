<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" version="1.2"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  viewBox="0 0 300 300" preserveAspectRatio="xMidYMid" >

  <metadata
      xmlns:dc="http://purl.org/dc/elements/1.1/"
      xmlns:volity="http://volity.org/protocol/metadata" >

    <volity:ruleset>http://volity.org/games/tictactoe</volity:ruleset>
    <dc:title>Tic Tac Toe example UI</dc:title>
    <dc:creator>Andrew Plotkin</dc:creator>
    <volity:version>1.0.example</volity:version>
    <dc:modified>2006-04-14</dc:modified>

  </metadata>

  <script type="text/ecmascript">
    <![CDATA[

  var svg_ns = "http://www.w3.org/2000/svg";
  var xlink_ns = "http://www.w3.org/1999/xlink";
  var position_x_values = [ 0, 100, 200, 0, 100, 200, 0, 100, 200 ];
  var position_y_values = [ 0, 0, 0, 100, 100, 100, 200, 200, 200 ];

  var seat_whose_turn_it_is = null;

  function initialize() {
    var pos;
    var grp = document.getElementById("squares-group");

    for (pos=0; pos<9; pos++) {
      var square = document.createElementNS(svg_ns, "rect");
      square.setAttribute("id", "square-"+pos);
      square.setAttribute("x", position_x_values[pos]);
      square.setAttribute("y", position_y_values[pos]);
      square.setAttribute("width", 100);
      square.setAttribute("height", 100);
      square.setAttribute("fill", "white");
      square.setAttribute("onclick", "square_clicked("+pos+")");
      square.setAttribute("onmousedown", "square_mousedown("+pos+")");
      square.setAttribute("onmouseup", "square_mouseup("+pos+")");
      square.setAttribute("onmouseout", "square_mouseup("+pos+")");

      grp.appendChild(square);
    }
  }

  // Game has begun.
  volity.start_game = function() {
    erase_marks();
    var ix;
    for (ix=0; ix<9; ix++)
      set_square_color(ix, "white");
    seat_whose_turn_it_is = null;
    seatmark();
  }

  // Joining a game which has begin.
  volity.game_has_started = function() {
    volity.start_game();
  }

  // Referee adds a move to the board.
  game.mark = function(seat_id, location) {
    draw_mark(seat_id, location);
  }

  // Referee says that it's the given seat's turn to play.
  game.must_mark = function(seat_id) {
    seat_whose_turn_it_is = seat_id;
    seatmark(seat_id);
  }

  // Referee declares a win.
  game.win = function(seat_id, loc_1, loc_2, loc_3) {
    seat_whose_turn_it_is = null;

    set_square_color(loc_1, "yellow");
    set_square_color(loc_2, "yellow"); 
    set_square_color(loc_3, "yellow");

    var seatmarks = [];
    seatmarks[seat_id] = "win";
    seatmark(seatmarks);
  }

  // Referee declares a tie.
  game.tie = function() {
    seat_whose_turn_it_is = null;

    var seatmarks = [];
    seatmarks["x"] = "win";
    seatmarks["o"] = "win";
    seatmark(seatmarks);
  }

  // Return true if you are a seated player and it is your turn.
  function it_is_my_turn() {
    if (!info.seat)
      return false;
    if (!seat_whose_turn_it_is)
      return false;
    if (info.state == "setup" || info.state == "suspended")
      return false;
    if (info.seat == seat_whose_turn_it_is)
      return true;
    else
      return false;
  }

  // Return true if the given square has an X or O.
  function is_square_marked(pos) {
    var obj;
    obj = document.getElementById("mark-"+pos);
    if (obj)
      return true;
    else
      return false;
  }

  // onclick handler for squares.
  function square_clicked(pos) {
    if (!it_is_my_turn())
      return;
    if (is_square_marked(pos))
      return;
    rpc("mark", pos);
  }

  // mousedown handler for squares -- turn the square gray.
  function square_mousedown(pos) {
    if (!it_is_my_turn())
      return;
    if (is_square_marked(pos))
      return;
    set_square_color(pos, "gray");
  }

  // mouseup/mouseout handler for squares -- turn the square white.
  function square_mouseup(pos) {
    if (!it_is_my_turn())
      return;
    if (is_square_marked(pos))
      return;
    set_square_color(pos, "white");
  }

  // Add an X or O to the board.
  // Which is a string, "x" or "o" (lower-case). Pos is a number from 0 to 8.
  function draw_mark(which, pos) {
    var mark, grp;

    mark = document.createElementNS(svg_ns, "use");
    mark.setAttributeNS(xlink_ns, "href", "#"+which+"-mark");
    mark.setAttribute("id", "mark-"+pos);
    mark.setAttribute("x", position_x_values[pos]);
    mark.setAttribute("y", position_y_values[pos]);

    grp = document.getElementById("marks-group");
    grp.appendChild(mark);
  }

  // Erase all the Xs and Os from the board.
  function erase_marks() {
    var grp;
    grp = document.getElementById("marks-group");
    remove_children(grp);
  }

  // Set a single square's color.
  function set_square_color(pos, color) {
    var obj;
    obj = document.getElementById("square-"+pos);
    obj.setAttribute("fill", color);
  }

  // Delete all the child nodes of the given object (usually a group).
  function remove_children(parent) {
    var obj, ls;
    ls = parent.childNodes;
    while (ls.length > 0) {
      obj = ls.item(0);
      parent.removeChild(obj);
    }
  }

  initialize();

    // ]]>
  </script>

  <defs>

    <g id="x-mark">
      <line x1="25" y1="25" x2="75" y2="75" 
        stroke="blue" stroke-width="10" stroke-linecap="round" />
      <line x1="25" y1="75" x2="75" y2="25" 
        stroke="blue" stroke-width="10" stroke-linecap="round" />
    </g>

    <g id="o-mark">
      <circle cx="50" cy="50" r="25"
        stroke="blue" fill="none" stroke-width="10" />
    </g>

  </defs>

  <g id="squares-group" />

  <line x1="5" y1="100" x2="295" y2="100" 
    stroke="black" stroke-width="5" stroke-linecap="round" />
  <line x1="5" y1="200" x2="295" y2="200" 
    stroke="black" stroke-width="5" stroke-linecap="round" />
  <line x1="100" y1="5" x2="100" y2="295" 
    stroke="black" stroke-width="5" stroke-linecap="round" />
  <line x1="200" y1="5" x2="200" y2="295" 
    stroke="black" stroke-width="5" stroke-linecap="round" />

  <g id="marks-group" />

</svg>
